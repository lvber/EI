/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.63
 * Generated at: 2015-11-28 11:36:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.app.model.DeleteResult;
import java.util.TreeMap;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.TreeSet;
import com.app.model.ValidationError;
import com.app.model.UploadResult;
import java.util.ArrayList;

public final class admin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/include/ValidCredentials.jsp", Long.valueOf(1447151814000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    if(session.getAttribute("student") == null && session.getAttribute("admin")==null) {
        response.sendRedirect("");
        return;
    } 

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("        <title>SMUA | Administrator</title>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <h1>Administrator Menu | <a href='logout.jsp'>Logout</a></h1>\r\n");
      out.write("            <hr>\r\n");
      out.write("            <h2>Bootstrap/Update</h2>\r\n");
      out.write("            ");
            String uploadError = (String) request.getAttribute("uploadError");
                String errorFormRadioButton = null;
                if (uploadError != null) {
                    out.println("<p><font color='red'>" + uploadError + "</font></p>");
                    errorFormRadioButton = request.getParameter("uploadOption");
                }
                request.removeAttribute("uploadError");
            
      out.write("\r\n");
      out.write("            <table>\r\n");
      out.write("                <form method=\"POST\" enctype=\"multipart/form-data\"  action=\"MainFileUpload\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>Upload File:</td>\r\n");
      out.write("                        <td><input type=\"file\" name=\"upfile\" accept=\".zip\" required=\"required\"></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>Bootstrap:</td>\r\n");
      out.write("                        <td><input type=\"radio\" name=\"uploadOption\" value=\"bootstrap\"\r\n");
      out.write("                                   ");

                                       if (errorFormRadioButton != null && errorFormRadioButton.equals("bootstrap")) {
                                           out.println("checked");
                                       }
                                   
      out.write("     \r\n");
      out.write("                                   required=\"required\" />\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>Update:</td>\r\n");
      out.write("                        <td><input type=\"radio\" name=\"uploadOption\" value=\"update\"\r\n");
      out.write("                                   ");

                                       if (errorFormRadioButton != null && errorFormRadioButton.equals("update")) {
                                           out.println("checked");
                                       }
                                   
      out.write("\r\n");
      out.write("                                   required=\"required\" />\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td></td><td><input type=\"submit\" value=\"Submit\"/></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </form>\r\n");
      out.write("            </table>\r\n");
      out.write("            <hr>\r\n");
      out.write("            <h2>Manual Deletion</h1>\r\n");
      out.write("                <form method=\"POST\" action=\"ManualDeletion\">\r\n");
      out.write("                    ");

                        String manualDeletionError = (String) request.getAttribute("manualDeletionError");
                        boolean hasError = false;
                        if (manualDeletionError != null) {
                            out.println("<p><font color='red'>" + manualDeletionError + "<br />Please try again</font></p>");
                            hasError = true;
                        }
                        request.removeAttribute("manualDeletionError");
                    
      out.write("\r\n");
      out.write("                    <table>\r\n");
      out.write("\r\n");
      out.write("                        <tr><td>Start date:</td><td><input type=\"date\"  name=\"startdate\" required=\"required\" ");

                            if (request.getAttribute("startDate") != null) {
                                out.println("value=" + request.getAttribute("startDate"));
                            }
      out.write("></td></tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>Mac Address (optional):</td>\r\n");
      out.write("                            <td><input type=\"text\" name=\"macaddress\" size=\"28\"  /></td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr><td>End date (optional):</td><td><input type=\"date\"  name=\"enddate\"></td></tr>\r\n");
      out.write("                        <tr><td>Start time (optional):</td><td><input type=\"time\" name=\"starttime\"></td></tr>\r\n");
      out.write("                        <tr><td>End time (optional):</td><td><input type=\"time\" name=\"endtime\"></td></tr>\r\n");
      out.write("                        <tr><td>Enter a location id (optional):</td><td><input type=\"text\" name=\"location-id\"></td></tr>\r\n");
      out.write("                        <tr><td>Enter a semantic place  (optional):</td><td><input type=\"text\" name=\"semantic-place\"></td></tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td></td><td><input type=\"submit\" name=\"Submit\"/></td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </table>\r\n");
      out.write("                </form>\r\n");
      out.write("                ");

                    TreeSet<UploadResult> results = (TreeSet<UploadResult>) request.getAttribute("result");
                    if (results != null) {
                        String unknownFiles = (String) request.getAttribute("unknownFiles");
                        out.println("<h2>Results for your upload:</h2>");
                        if (unknownFiles != null) {
                            out.println("Invalid Files not uploaded: " + unknownFiles);
                        }
                        for (UploadResult uploadResult : results) {
                            out.println("<p>");
                            out.println("File: " + uploadResult.getFileName() + "<br/>");
                            if (!uploadResult.getFileName().equals("location-delete.csv")) {
                                out.println("Total Records Uploaded: " + uploadResult.getNumSuccessful());
                            } else {
                                int numSuccessfulDeletion = uploadResult.getNumSuccessful();
                                int totalValidData = uploadResult.getValidDataList().size();
                                out.println("Total Records that are valid and deleted: " + numSuccessfulDeletion + "<br />");
                                out.println("Total Records that are valid but not found in database: " + (totalValidData - numSuccessfulDeletion) + "<br />");
                            }
                        }
                        out.println("<h3>Errors</h3>");
                        for (UploadResult uploadResult : results) {
                            out.println("<p>");
                            out.println("File: " + uploadResult.getFileName() + "<br />");
                            out.println("Errors:");
                            TreeMap<Integer, ArrayList<String>> ve = uploadResult.getErrorList();

                            if (ve.size() != 0) {
                                out.println("<br />");
                                for (Integer key : ve.keySet()) {
                                    out.println("Row " + key);
                                    ArrayList<String> errors = ve.get(key);
                                    boolean isSubsequentLine = false;
                                    for (String indivError : errors) {
                                        if (isSubsequentLine) {
                                            out.println(", ");
                                        }
                                        out.println(indivError);
                                        isSubsequentLine = true;
                                    }
                                    out.println("<br />");
                                }
                            } else {
                                out.println(" None");
                            }
                            out.println("</p>");
                        }
                        request.removeAttribute("result");
                    }
                    Integer manualDeletionNum = (Integer) request.getAttribute("manualDeletionNum");
                    ArrayList<DeleteResult> deleteResults = (ArrayList<DeleteResult>) request.getAttribute("manualDeletionResults");
                    if (manualDeletionNum != null) {
                        out.println("<li>" + manualDeletionNum + " records were deleted</li></ul>");
                        out.println("<li>Results:</li></ul>");
                        for (DeleteResult dr : deleteResults) {
                            out.println("location-id: " + dr.getLocationid() + "</br>");
                            out.println("timestamp: " + dr.getTimestamp().toString().replace(".0", "") + "</br>");
                            out.println("macaddress: " + dr.getMacaddress() + "</br>");
                            out.println("</br>");
                        }
                        request.removeAttribute("manualDeletionResults");
                    }
                    request.removeAttribute("manualDeletionNum");
                
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
